% GINA_ANALYSER MATLAB code for the GINA_ANALYSER GUI.
%       This file GINA_Analyser is responsible for GUI inputs and outputs.
%       It tests that the user has met all requirements for GUI usage and
%       prompts the user to make changes if necessary. Ouputs from this
%       file are sent to GA_MAIN MATLAB file.



% --- GUI INITIALISATION CODE - autogenerated (NB: NOT MY OWN WORK)
function varargout = GINA_Analyser(varargin)
% GINA_ANALYSER MATLAB code for GINA_Analyser.fig
%      GINA_ANALYSER, by itself, creates a new GINA_ANALYSER or raises the
%      existing singleton*.
%
%      H = GINA_ANALYSER returns the handle to a new GINA_ANALYSER or the
%      handle to the existing singleton*.
%
%      GINA_ANALYSER('CALLBACK',hObject,eventData,handles,...) calls the
%      local function named CALLBACK in GINA_ANALYSER.M with the given
%      input arguments.
%
%      GINA_ANALYSER('Property','Value',...) creates a new GINA_ANALYSER or
%      raises the existing singleton*.  Starting from the left, property
%      value pairs are applied to the GUI before GINA_Analyser_OpeningFcn
%      gets called.  An unrecognized property name or invalid value makes
%      property application stop.  All inputs are passed to
%      GINA_Analyser_OpeningFcn via varargin.
%
%      *See GUI Options on GUIDE's Tools menu.  Choose "GUI allows only one
%      instance to run (singleton)".
%
% See also: GUIDE, GUIDATA, GUIHANDLES

% Edit the above text to modify the response to help GINA_Analyser

% Last Modified by GUIDE v2.5 21-Dec-2019 12:42:52

% Begin initialization code - DO NOT EDIT
gui_Singleton = 1;
gui_State = struct('gui_Name',       mfilename, ...
                   'gui_Singleton',  gui_Singleton, ...
                   'gui_OpeningFcn', @GINA_Analyser_OpeningFcn, ...
                   'gui_OutputFcn',  @GINA_Analyser_OutputFcn, ...
                   'gui_LayoutFcn',  [] , ...
                   'gui_Callback',   []);
if nargin && ischar(varargin{1})
    gui_State.gui_Callback = str2func(varargin{1});
end

if nargout
    [varargout{1:nargout}] = gui_mainfcn(gui_State, varargin{:});
else
    gui_mainfcn(gui_State, varargin{:});
end
% ---End initialization code - DO NOT EDIT



% --- Executes just before GINA_Analyser is made visible.
function GINA_Analyser_OpeningFcn(hObject, eventdata, handles, varargin)
% Choose default command line output for GINA_Analyser
handles.output = hObject;

% Update handles structure
guidata(hObject, handles);



% --- Outputs from this function are returned to the command line.
function varargout = GINA_Analyser_OutputFcn(hObject, eventdata, handles) 
% Get default command line output from handles structure
varargout{1} = handles.output;


% --- Executes on button press in browse1, which browses for input xlsx
% file from GINA
function browse1_Callback(hObject, eventdata, handles)
currentFolder = pwd;
filename = fullfile(currentFolder, 'GA_TestData', '*.xlsx');
global file_gina
file_gina = (uigetfile({filename}, 'Select one or more files', ...
    'MultiSelect', 'on'));
set(handles.listbox1,'string', file_gina);

out = filegetter(handles, get(handles.listbox1, 'String'), filename, ...
    file_gina, handles.listbox1, hObject, eventdata);
file_gina = cellstr(out);
set(handles.listbox1,'string', file_gina);


% --- Executes on button press go.
function go_Callback(hObject, eventdata, handles)
    % Formats global variables into appropriate data class typess
    global add_table
    add_table = convertCharsToStrings(get(handles.addtable, 'String'));
    global file_gina
    file_gina = cellstr(get(handles.listbox1,'String'));
    global add_check
    global new_check
    global new_table

    % Catch user error of no 'Outout Option' box being checked
    if isequal(add_check, 0) && isequal(new_check, 0)
        fprintf("line 117")
        warndlg("You must check at least one 'Output Option for Breath by Breath Data'");
        return
    end
    
    % Catch user error of 'add data...' box being checked but no file
    % selected
    if string(add_table)=='0' || isequal(string(add_table),'Select File')        
        add_check = 0;
        new_check = 1;
        x = get(handles.newtable, 'String');

        if isempty(x)        
            warndlg('FileValidator can not run without a valid existing or new table. Select a file and click "Go" again');
            resetgui(hObject, eventdata, handles, 1)
            return
        else
            a = outfilechecker(x, handles);
            set(handles.newtable, 'String', a);    
        end
    end

    % Catch error of file already existing if 'Create new table' selected
    if get(handles.newbox, 'Value') == 1 
        check = 0;
        while check == 0
            a = get(handles.newtable, 'String');
            if isempty(a)
                warndlg('FileValidator can not run without a valid existing or new table. Select a file and click "Go" again');
                resetgui(hObject, eventdata, handles, 1)                
                return
            else
            % First check that user has written in a file name
            b = outfilechecker(a, handles);
                if isempty(b)
                    warndlg('FileValidator can not run without a valid existing or new table. Select a file and click "Go" again');
                    resetgui(hObject, eventdata, handles, 1)
                    return
                else
                    f = string(outfilechecker(a, handles)) + '.xlsx';
                end
            end

            % Now check if that file name already exists and prompt user
            %selection to overwrite old file or create new file name
            currentFolder = pwd;
            File = fullfile(currentFolder, 'GA_OutputData', f);      

            if isfile(File)
                str = ['File name " ', File, ' " already exists. Do you want to overwrite this file?'];
                newStr = join(str);
                answer = questdlg(newStr, 'Overwrite file? The old version will be deleted', 'Yes', 'No', 'No');
                switch answer
                    case 'Yes'           
                        new_table = f;                                    
                        check = 1;
                    case 'No'
                        set(handles.newtable, 'string', 'Enter New File Name');
                        newFile = inputdlg('Enter a new file name, no spaces: ', 'Output File Name');
                        set(handles.newtable,'String', newFile);                
                end

            else 
                new_table = f; 
                check = 1;
            end

        end
    end
    
    % Catch error of no input GINA file selection
    x = get(handles.listbox1, 'String');
    if isequal(x, '0') || isequal(x,'Select Files')
        warndlg('FileValidator can not run without a valid file selection. Select a file and click "Go" again');
        resetgui(hObject, eventdata, handles, 2);
        clear global
        clear
    else
    % Attempt to run ga_main file. If any additional errors are thrown (eg,
    % improper file name, excel file open
        %try
            fprintf('Entered try-catch')
            ga_main 
        %catch       
            %warndlg('Problem using GINA_Analyser. Check that any excel files being written or added to are closed. Ensure file names do not include illegal symbols. Ensure at least one box is ticked');
        %end 
        
        resetgui(hObject, eventdata, handles, 2) ;
        clear global
        clear
        
    end



% --- Checks that a filename has been written by user
function a = outfilechecker(f, handles) 
    if strcmp(f, "Enter New File Name") || strcmp(f, "0")
        uiwait(warndlg('Please enter a new output file name'));
        newFile = inputdlg('Enter a new file name, no spaces: ', 'Output File Name');
        set(handles.newtable,'String', newFile);
        g = get(handles.newtable, 'String');
        a = outfilechecker(g, handles);
    else
        a = f;
        return
    end
 
    
% --- Checks that a file has been selected after browse button press
function out = filegetter(handles, filestring, filename, setfile, releventhandle, hObject, eventdata) 
if length(filestring) == 1 && filestring == '0'  
    % set a question
    answer = questdlg('You must select a file/s. Click "Select File", or "Cancel" to exit and reset.', 'Choose a file', 'Select File', 'Cancel', 'Select File');

    switch answer
        case 'Select File'
            setfile = uigetfile({filename}, 'File Selector');
            set(releventhandle,'String', setfile);
            next = get(releventhandle, 'String');
            out = filegetter(handles, next, filename, setfile, releventhandle, hObject, eventdata);
        case 'Cancel'                
            out = 'Select File';
    end
else        
    out = setfile;
    return
end




% --- Executes on button press in browse2, which browses for an existing
% table to add data to in 'Ouput Options...' section.
function browse2_Callback(hObject, eventdata, handles)
% hObject    handle to browse2 (see GCBO) eventdata  reserved - to be
% defined in a future version of MATLAB handles    structure with handles
% and user data (see GUIDATA)

    %--- Browses for a table, checks that file is selected and catches
    %error, sets add_table as string of file name and displays file name in
    %addtable box on the GUI
    currentFolder = pwd;
    filename = fullfile(currentFolder, 'GA_OutputData', '*.xlsx');
    global add_table
    add_table = "";
    add_table = uigetfile({filename}, 'Select one file', 'MultiSelect', 'off'); 
    set(handles.addtable,'String', add_table);
    %tests if 0 is selected
    out = filegetter(handles, get(handles.addtable, 'String'), filename,...
        add_table, handles.addtable, hObject, eventdata); %makes sure a file is selected
    add_table = string(out);
    set(handles.addtable,'String', add_table);



% --- Executes on button press in addbox, creates boolean for GA_main to
% know if box selected
function addbox_Callback(hObject, eventdata, handles)
% hObject    handle to addbox (see GCBO) eventdata  reserved - to be
% defined in a future version of MATLAB handles    structure with handles
% and user data (see GUIDATA)
    global add_check
    if get(hObject, 'Value') == get(hObject, 'Max')
        add_check = 1;
    else
        add_check = 0;
    end


% --- Executes on button press in newbox, creates boolean for GA_main to
% know if box selected
function newbox_Callback(hObject, eventdata, handles)
% hObject    handle to newbox (see GCBO) eventdata  reserved - to be
% defined in a future version of MATLAB handles    structure with handles
% and user data (see GUIDATA)
    global new_check
    if get(hObject, 'Value') == get(hObject, 'Max')
        %set(handles.newbox,'String', 'yes');
        new_check = 1;
    else
        new_check = 0;
    end


% --- Executes on button press for HELP, brings up the manual.
function helpbutton_Callback(hObject, eventdata, handles)
% hObject    handle to helpbutton (see GCBO) eventdata  reserved - to be
% defined in a future version of MATLAB handles    structure with handles
% and user data (see GUIDATA)
open GINA_ANALYSER_MANUAL.pdf


% --- Resets GUI back to its original state
function resetgui(hObject, eventdata, handles, erasename) 
set(handles.addbox,'value',0)
set(handles.newbox,'value',0)
set(handles.nonspontcheck, 'value', 0)
global add_check
global new_check
global spontcheck
add_check = 0;
new_check = 0;
spontcheck = 0;
set(handles.addtable, 'string', 'Select File');
if erasename == 1
    set(handles.newtable, 'string', 'Enter New File Name');
elseif erasename ==2
    set(handles.newtable, 'string', 'Enter New File Name');
    set(handles.listbox1, 'string', 'Select Files');
end

% --- Executes on button press Reset Fields button
function pushbutton5_Callback(hObject, eventdata, handles)
% hObject    handle to pushbutton5 (see GCBO) eventdata  reserved - to be
% defined in a future version of MATLAB handles    structure with handles
% and user data (see GUIDATA)
    resetgui(hObject, eventdata, handles, 2); 




% --- Executes on selection change in choicemenu, for selection of Breath
% Calculation by WOB or Flow
function choicemenu_Callback(hObject, eventdata, handles)
% hObject    handle to choicemenu (see GCBO) eventdata  reserved - to be
% defined in a future version of MATLAB handles    structure with handles
% and user data (see GUIDATA)
    global flag
    v = get(handles.choicemenu, 'Value');
    flag = v;



% --- Executes during object creation, after setting all properties.
function choicemenu_CreateFcn(hObject, eventdata, handles)
% hObject    handle to choicemenu (see GCBO) eventdata  reserved - to be
% defined in a future version of MATLAB handles    empty - handles not
% created until after all CreateFcns called

    if ispc && isequal(get(hObject,'BackgroundColor'), get(0,...
            'defaultUicontrolBackgroundColor'))
        set(hObject,'BackgroundColor','white');
    end

    
    
%---Start: Auto-generated code for GUI feature formatting. NB: NOT MY OWN
%WORK

% --- Executes on selection change in listbox1.
function listbox1_Callback(hObject, eventdata, handles)

% --- Executes during object creation, after setting all properties.
function listbox1_CreateFcn(hObject, eventdata, handles)
% hObject    handle to listbox1 (see GCBO) eventdata  reserved - to be
% defined in a future version of MATLAB handles    empty - handles not
% created until after all CreateFcns called

% Hint: listbox controls usually have a white background on Windows.
%       See ISPC and COMPUTER.
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,...
        'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end



function newtable_Callback(hObject, eventdata, handles)
% hObject    handle to newtable (see GCBO) eventdata  reserved - to be
% defined in a future version of MATLAB handles    structure with handles
% and user data (see GUIDATA)



% --- Executes during object creation, after setting all properties.
function newtable_CreateFcn(hObject, eventdata, handles)
% hObject    handle to newtable (see GCBO) eventdata  reserved - to be
% defined in a future version of MATLAB handles    empty - handles not
% created until after all CreateFcns called


if ispc && isequal(get(hObject,'BackgroundColor'), get(0,...
        'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end



function addtable_Callback(hObject, eventdata, handles)
% hObject    handle to addtable (see GCBO) eventdata  reserved - to be
% defined in a future version of MATLAB handles    structure with handles
% and user data (see GUIDATA)



% --- Executes during object creation, after setting all properties.
function addtable_CreateFcn(hObject, eventdata, handles)
% hObject    handle to addtable (see GCBO) eventdata  reserved - to be
% defined in a future version of MATLAB handles    empty - handles not
% created until after all CreateFcns called


if ispc && isequal(get(hObject,'BackgroundColor'), get(0,...
        'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end

%---End: Auto-generated code for GUI feature formatting


% --- Executes on button press in nonspontcheck.
function nonspontcheck_Callback(hObject, eventdata, handles)
% hObject    handle to nonspontcheck (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hint: get(hObject,'Value') returns toggle state of nonspontcheck
global spontcheck
if get(hObject, 'Value') == get(hObject, 'Max')
        %set(handles.newbox,'String', 'yes');
        spontcheck = 1;
    else
        spontcheck = 0;
    end
